{"version":3,"sources":["Graph.js","Constant.js","App.js","index.js"],"names":["Graph","stopAnimation","animating","previousConstant","constant","result","console","log","ref","useRef","useState","localPlaying","useEffect","canvas","current","ctx","getContext","ratio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio","getPixelRatio","width","getComputedStyle","getPropertyValue","slice","height","style","requestId","prevTime","totalTime","frame","yPos","drawText","text","font","fillText","constLine","prev","multiplier","timeElapsed","yPrev","yCurrent","deltaY","distance","Math","abs","totDistance","strokeStyle","lineWidth","max","min","beginPath","moveTo","lineTo","stroke","draw","clearRect","drawYAxis","drawXAxis","rendering","pos","arc","PI","fill","drawBall","getYPos","render","t","requestAnimationFrame","cancelAnimationFrame","Constant","onValueChange","type","step","onChange","e","target","value","fontSize","App","setAnimating","setConstant","setPreviousConstant","className","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55716d2f.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\nexport const Graph = ({\n    stopAnimation,\n    animating,\n    previousConstant,\n    constant,\n    result,\n}) => {\n    console.log(animating);\n    const ref = useRef();\n    \n   \n    const [localPlaying, setLocalPlaying] = useState(animating);\n    console.log(localPlaying);\n    const getPixelRatio = (context) => {\n        var backingStore =\n            context.backingStorePixelRatio ||\n            context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio ||\n            1;\n        return (window.devicePixelRatio || 1) / backingStore;\n    };\n\n    \n\n    useEffect(() => {\n        console.log(localPlaying);\n        const canvas = ref.current;\n        const ctx = canvas.getContext(\"2d\");\n        const ratio = getPixelRatio(ctx);\n        const width = getComputedStyle(canvas)\n            .getPropertyValue(\"width\")\n            .slice(0, -2);\n        const height = getComputedStyle(canvas)\n            .getPropertyValue(\"height\")\n            .slice(0, -2);\n\n        canvas.width = width * ratio;\n        canvas.height = height * ratio;\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n        let prevTime = 0,\n        totalTime = 0,\n            frame = 0,\n            yPos = 0,\n            rendering = true,\n            requestId;\n\n            const drawYAxis = (ctx) => {\n                ctx.beginPath();\n                ctx.moveTo(10, 0);\n                ctx.lineTo(10, 800);\n                ctx.stroke();\n            };\n        \n            const drawXAxis = (ctx) => {\n                ctx.beginPath();\n                ctx.moveTo(0, 400);\n                ctx.lineTo(800, 400);\n                ctx.stroke();\n            };\n        \n            const drawText = (ctx, text, yPos) => {\n                ctx.font = \"1em Arial\";\n                ctx.fillText(text, 0, yPos);\n            };\n        \n            const handleStopAnimation = () => {\n                //playing.current = false;\n            };\n        \n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            const constLine = (ctx, prev, current, multiplier, timeElapsed) => {\n                const yPrev = 400 - (200 * multiplier) / prev;\n                const yCurrent = 400 - (200 * multiplier) / current;\n                \n                const deltaY = timeElapsed / 30 || .45;\n                //console.log(deltaY);\n\n                yPos =\n                    current < prev\n                        ? yPos - deltaY\n                        : yPos + deltaY;\n                \n        \n                const distance = Math.abs(yPos);\n        \n                const totDistance = Math.abs(yCurrent - yPrev);\n        \n                ctx.strokeStyle = \"hsl(0,0%,80%)\";\n        \n                ctx.lineWidth = 1 \n                if (multiplier == prev) {\n                    ctx.strokeStyle = 'hsl(0,0%,10%)';\n                    ctx.lineWidth = Math.max(3 - (frame / 25), 1.5);\n                }\n                if (multiplier == current) {\n                    ctx.lineWidth = Math.min(1 + (frame / 25), 3);\n                    ctx.strokeStyle = \"hsl(0,0%,10%)\";\n                }\n                \n                \n        \n                ctx.beginPath();\n        \n                if (distance > totDistance) {\n                    yPos = totDistance;\n                    console.log(yPos);\n                    ctx.moveTo(0, yPos + yPrev);\n                    ctx.lineTo(800, yPos + yPrev);\n                    ctx.stroke();\n                    drawText(ctx, multiplier, yPos);\n                    return false;\n                }\n        \n                ctx.moveTo(0, yPos + yPrev);\n                ctx.lineTo(800, yPos + yPrev);\n                ctx.stroke();\n                drawText(ctx, multiplier, yPos);\n                return true;\n            };\n        \n            const drawOne = (ctx, prev, current, frame) => {\n                const yPrev = 400 - 200 / prev;\n                const yCurrent = 400 - 200 / current;\n                let yPos = current < prev ? yPrev - frame : yPrev + frame;\n        \n                const distance = Math.abs(yPos - yPrev);\n        \n                const totDistance = Math.abs(yCurrent - yPrev);\n        \n                if (distance > totDistance) {\n                    yPos = yCurrent;\n                }\n        \n                ctx.beginPath();\n                ctx.moveTo(0, yPos);\n                ctx.lineTo(800, yPos);\n                ctx.stroke();\n                drawText(ctx, 1, yPos);\n            };\n        \n            const drawBall = (ctx, pos) => {\n                ctx.beginPath();\n                ctx.arc(100, pos, 20, 20, 0, 2 * Math.PI);\n                ctx.fill();\n            };\n        \n            const draw = (ctx, timeElapsed, yPos) => {\n                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                \n                drawYAxis(ctx);\n                drawXAxis(ctx);\n                let rendering = true;\n                const rangeNums = Math.max(previousConstant, constant) * 2\n                \n                if (!constLine(ctx, previousConstant, constant, 1, timeElapsed, yPos)) {\n                    rendering = false;\n                }\n\n                /* for (let j = 1; j <= rangeNums; j++) {\n                    if (!constLine(ctx, previousConstant, constant, j, frame, yPos)) {\n                        rendering = false;\n                    }\n                } */\n        \n                drawText(ctx, constant);\n                drawBall(ctx, getYPos(result));\n                return rendering;\n            };\n\n        \n            \n        const render = (t) => {\n            //console.clear();\n            frame += 1;\n            const timeElapsed = t - prevTime;\n            prevTime = t;\n            //console.log('yPos: ', yPos)\n            //console.log('FPS:  ', 1 / (timeElapsed / 1000));\n            //console.log('ms since: ', timeElapsed);\n            if (timeElapsed) {\n                totalTime += timeElapsed\n            }\n            //console.log('aFPS:  ', frame / (totalTime / 1000));\n            \n            rendering = draw(ctx,  timeElapsed, yPos);\n            \n            //console.log('frame#, ', frame)\n\n            if (!rendering) {\n                console.log('aFPS:  ', frame / (totalTime / 1000))\n                console.log('time total: ', totalTime / 1000, 'seconds')\n                return;\n            }\n\n            \n            requestId = requestAnimationFrame(render);\n            \n        };\n\n        render();\n\n        return () => {\n            console.log(requestId)\n            cancelAnimationFrame(requestId);\n        };\n    });\n\n    const getYPos = (result) => {\n        const pos = 400 - 200 * result;\n        return pos;\n    };\n\n    return (\n        <canvas\n            ref={ref}\n            style={{\n                width: \"800px\",\n                height: \"800px\",\n            }}\n        />\n    );\n};\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport const Constant = ({ onValueChange }) => {\n  const [value, setValue] = useState(1);\n\n  const handleChange = (e) => {\n    onValueChange(e.target.value);\n  };\n  return (\n    <input\n      type=\"number\"\n      step=\".125\"\n      onChange={handleChange}\n  \n      style={{\n          fontSize: 40,\n        \n      }}\n    />\n  );\n};\n","import React from 'react';\nimport {useState} from 'react';\nimport {Graph} from './Graph'\nimport {Constant} from './Constant'\n\n\nfunction App() {\n  const [animating, setAnimating] = useState(false);\n  const [result, setResult] = useState(1);\n  const [constant, setConstant] = useState(1);\n  const [previousConstant, setPreviousConstant] = useState(1);\n\n  console.log(animating)\n  const handleConstantChange = (value) => {\n    if (value) {\n      setAnimating(true);\n      console.log('animating')\n      setPreviousConstant(constant);\n      setConstant(value);\n    }\n  }\n\n  const handleStopAnimation = () => {\n   \n    setAnimating(false)\n\n    console.log('stopping animation')\n\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <Graph stopAnimation = {handleStopAnimation} animating={animating} previousConstant={previousConstant} constant={constant} result={result} />\n      <Constant onValueChange={handleConstantChange}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}